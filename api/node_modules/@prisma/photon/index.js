"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("./runtime");
/**
 * Query Engine version: latest
 */
const path = require("path");
const debug = runtime_1.debugLib('photon');
/**
 * A PhotonRequestError is an error that is thrown in conjunction to a concrete query that has been performed with Photon.js.
 */
class PhotonRequestError extends Error {
    constructor(message, code, meta) {
        super(message);
        this.message = message;
        this.code = code;
        this.meta = meta;
        this.code = code;
        this.meta = meta;
    }
}
exports.PhotonRequestError = PhotonRequestError;
class PhotonFetcher {
    constructor(photon, engine, debug = false, hooks) {
        this.photon = photon;
        this.engine = engine;
        this.debug = debug;
        this.hooks = hooks;
    }
    request(document, path = [], rootField, typeName, isList, callsite) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = String(document);
            debug('Request:');
            debug(query);
            if (this.hooks && this.hooks.beforeRequest) {
                this.hooks.beforeRequest({ query, path, rootField, typeName, document });
            }
            try {
                yield this.photon.connect();
                const result = yield this.engine.request(query, typeName);
                debug('Response:');
                debug(result);
                return this.unpack(document, result, path, rootField, isList);
            }
            catch (e) {
                if (callsite) {
                    const { stack } = runtime_1.printStack({
                        callsite,
                        originalMethod: path.join('.'),
                        onUs: e.isPanic
                    });
                    const message = stack + '\n\n' + e.message;
                    if (e.code) {
                        throw new PhotonRequestError(message, e.code, e.meta);
                    }
                    throw new Error(message);
                }
                else {
                    if (e.isPanic) {
                        throw e;
                    }
                    else {
                        throw new Error(`Error in Photon${path}: \n` + e.stack);
                    }
                }
            }
        });
    }
    unpack(document, data, path, rootField, isList) {
        const getPath = [];
        if (rootField) {
            getPath.push(rootField);
        }
        getPath.push(...path.filter(p => p !== 'select' && p !== 'include'));
        return runtime_1.unpack({ document, path: getPath, data });
    }
}
/**
 * Build tool annotations
 * In order to make `ncc` and `node-file-trace` happy.
**/
path.join(__dirname, 'runtime/query-engine-darwin');
class Photon {
    constructor(options = {}) {
        const useDebug = options.debug === true ? true : typeof options.debug === 'object' ? Boolean(options.debug.library) : false;
        if (useDebug) {
            runtime_1.debugLib.enable('photon');
        }
        const debugEngine = options.debug === true ? true : typeof options.debug === 'object' ? Boolean(options.debug.engine) : false;
        // datamodel = datamodel without datasources + printed datasources
        const predefinedDatasources = [
            {
                "name": "db",
                "url": 'file:' + path.resolve(__dirname, '../../../prisma/dev.db')
            }
        ];
        const inputDatasources = Object.entries(options.datasources || {}).map(([name, url]) => ({ name, url: url }));
        const datasources = runtime_1.mergeBy(predefinedDatasources, inputDatasources, (source) => source.name);
        const internal = options.__internal || {};
        const engineConfig = internal.engine || {};
        this.engine = new runtime_1.Engine({
            cwd: engineConfig.cwd || path.resolve(__dirname, "../../../prisma"),
            debug: debugEngine,
            datamodelPath: path.resolve(__dirname, 'schema.prisma'),
            prismaPath: engineConfig.binaryPath || undefined,
            datasources,
            generator: { "name": "photon", "provider": "photonjs", "output": "/Users/connernovicki/Code/Interviews/toptal/restaurants/api/node_modules/@prisma/photon", "binaryTargets": [], "config": {} },
        });
        this.dmmf = new runtime_1.DMMFClass(exports.dmmf);
        this.fetcher = new PhotonFetcher(this, this.engine, false, internal.hooks);
    }
    connectEngine(publicCall) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.engine.start();
        });
    }
    connect() {
        if (this.connectionPromise) {
            return this.connectionPromise;
        }
        this.connectionPromise = this.connectEngine(true);
        return this.connectionPromise;
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.engine.stop();
        });
    }
    // won't be generated for now
    // private _query?: QueryDelegate
    // get query(): QueryDelegate {
    //   return this._query ? this._query: (this._query = QueryDelegate(this.dmmf, this.fetcher))
    // }
    get users() {
        return UserDelegate(this.dmmf, this.fetcher);
    }
    get restaurants() {
        return RestaurantDelegate(this.dmmf, this.fetcher);
    }
    get reviews() {
        return ReviewDelegate(this.dmmf, this.fetcher);
    }
    get comments() {
        return CommentDelegate(this.dmmf, this.fetcher);
    }
}
exports.Photon = Photon;
/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }
exports.OrderByArg = makeEnum({
    asc: 'asc',
    desc: 'desc'
});
exports.Role = makeEnum({
    USER: 'USER',
    OWNER: 'OWNER',
    ADMIN: 'ADMIN'
});
function UserDelegate(dmmf, fetcher) {
    const User = (args) => new UserClient(dmmf, fetcher, 'query', 'findManyUser', 'users', args, []);
    User.findOne = (args) => args.select ? new UserClient(dmmf, fetcher, 'query', 'findOneUser', 'users.findOne', args, []) : new UserClient(dmmf, fetcher, 'query', 'findOneUser', 'users.findOne', args, []);
    User.findMany = (args) => new UserClient(dmmf, fetcher, 'query', 'findManyUser', 'users.findMany', args, []);
    User.create = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'createOneUser', 'users.create', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'createOneUser', 'users.create', args, []);
    User.delete = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'deleteOneUser', 'users.delete', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'deleteOneUser', 'users.delete', args, []);
    User.update = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'updateOneUser', 'users.update', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'updateOneUser', 'users.update', args, []);
    User.deleteMany = (args) => new UserClient(dmmf, fetcher, 'mutation', 'deleteManyUser', 'users.deleteMany', args, []);
    User.updateMany = (args) => new UserClient(dmmf, fetcher, 'mutation', 'updateManyUser', 'users.updateMany', args, []);
    User.upsert = (args) => args.select ? new UserClient(dmmf, fetcher, 'mutation', 'upsertOneUser', 'users.upsert', args, []) : new UserClient(dmmf, fetcher, 'mutation', 'upsertOneUser', 'users.upsert', args, []);
    User.count = () => new UserClient(dmmf, fetcher, 'query', 'aggregateUser', 'users.count', {}, ['count']);
    return User; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class UserClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    ownedRestaurants(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'ownedRestaurants'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new RestaurantClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    authoredReviews(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'authoredReviews'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new ReviewClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    authoredComments(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'authoredComments'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new CommentClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'User', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.UserClient = UserClient;
function RestaurantDelegate(dmmf, fetcher) {
    const Restaurant = (args) => new RestaurantClient(dmmf, fetcher, 'query', 'findManyRestaurant', 'restaurants', args, []);
    Restaurant.findOne = (args) => args.select ? new RestaurantClient(dmmf, fetcher, 'query', 'findOneRestaurant', 'restaurants.findOne', args, []) : new RestaurantClient(dmmf, fetcher, 'query', 'findOneRestaurant', 'restaurants.findOne', args, []);
    Restaurant.findMany = (args) => new RestaurantClient(dmmf, fetcher, 'query', 'findManyRestaurant', 'restaurants.findMany', args, []);
    Restaurant.create = (args) => args.select ? new RestaurantClient(dmmf, fetcher, 'mutation', 'createOneRestaurant', 'restaurants.create', args, []) : new RestaurantClient(dmmf, fetcher, 'mutation', 'createOneRestaurant', 'restaurants.create', args, []);
    Restaurant.delete = (args) => args.select ? new RestaurantClient(dmmf, fetcher, 'mutation', 'deleteOneRestaurant', 'restaurants.delete', args, []) : new RestaurantClient(dmmf, fetcher, 'mutation', 'deleteOneRestaurant', 'restaurants.delete', args, []);
    Restaurant.update = (args) => args.select ? new RestaurantClient(dmmf, fetcher, 'mutation', 'updateOneRestaurant', 'restaurants.update', args, []) : new RestaurantClient(dmmf, fetcher, 'mutation', 'updateOneRestaurant', 'restaurants.update', args, []);
    Restaurant.deleteMany = (args) => new RestaurantClient(dmmf, fetcher, 'mutation', 'deleteManyRestaurant', 'restaurants.deleteMany', args, []);
    Restaurant.updateMany = (args) => new RestaurantClient(dmmf, fetcher, 'mutation', 'updateManyRestaurant', 'restaurants.updateMany', args, []);
    Restaurant.upsert = (args) => args.select ? new RestaurantClient(dmmf, fetcher, 'mutation', 'upsertOneRestaurant', 'restaurants.upsert', args, []) : new RestaurantClient(dmmf, fetcher, 'mutation', 'upsertOneRestaurant', 'restaurants.upsert', args, []);
    Restaurant.count = () => new RestaurantClient(dmmf, fetcher, 'query', 'aggregateRestaurant', 'restaurants.count', {}, ['count']);
    return Restaurant; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class RestaurantClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    creator(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'creator'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    reviews(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'reviews'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new ReviewClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Restaurant', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Restaurant', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Restaurant', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.RestaurantClient = RestaurantClient;
function ReviewDelegate(dmmf, fetcher) {
    const Review = (args) => new ReviewClient(dmmf, fetcher, 'query', 'findManyReview', 'reviews', args, []);
    Review.findOne = (args) => args.select ? new ReviewClient(dmmf, fetcher, 'query', 'findOneReview', 'reviews.findOne', args, []) : new ReviewClient(dmmf, fetcher, 'query', 'findOneReview', 'reviews.findOne', args, []);
    Review.findMany = (args) => new ReviewClient(dmmf, fetcher, 'query', 'findManyReview', 'reviews.findMany', args, []);
    Review.create = (args) => args.select ? new ReviewClient(dmmf, fetcher, 'mutation', 'createOneReview', 'reviews.create', args, []) : new ReviewClient(dmmf, fetcher, 'mutation', 'createOneReview', 'reviews.create', args, []);
    Review.delete = (args) => args.select ? new ReviewClient(dmmf, fetcher, 'mutation', 'deleteOneReview', 'reviews.delete', args, []) : new ReviewClient(dmmf, fetcher, 'mutation', 'deleteOneReview', 'reviews.delete', args, []);
    Review.update = (args) => args.select ? new ReviewClient(dmmf, fetcher, 'mutation', 'updateOneReview', 'reviews.update', args, []) : new ReviewClient(dmmf, fetcher, 'mutation', 'updateOneReview', 'reviews.update', args, []);
    Review.deleteMany = (args) => new ReviewClient(dmmf, fetcher, 'mutation', 'deleteManyReview', 'reviews.deleteMany', args, []);
    Review.updateMany = (args) => new ReviewClient(dmmf, fetcher, 'mutation', 'updateManyReview', 'reviews.updateMany', args, []);
    Review.upsert = (args) => args.select ? new ReviewClient(dmmf, fetcher, 'mutation', 'upsertOneReview', 'reviews.upsert', args, []) : new ReviewClient(dmmf, fetcher, 'mutation', 'upsertOneReview', 'reviews.upsert', args, []);
    Review.count = () => new ReviewClient(dmmf, fetcher, 'query', 'aggregateReview', 'reviews.count', {}, ['count']);
    return Review; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class ReviewClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    restaurant(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'restaurant'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new RestaurantClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    author(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'author'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    comments(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'comments'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = true;
        return new CommentClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Review', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Review', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Review', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.ReviewClient = ReviewClient;
function CommentDelegate(dmmf, fetcher) {
    const Comment = (args) => new CommentClient(dmmf, fetcher, 'query', 'findManyComment', 'comments', args, []);
    Comment.findOne = (args) => args.select ? new CommentClient(dmmf, fetcher, 'query', 'findOneComment', 'comments.findOne', args, []) : new CommentClient(dmmf, fetcher, 'query', 'findOneComment', 'comments.findOne', args, []);
    Comment.findMany = (args) => new CommentClient(dmmf, fetcher, 'query', 'findManyComment', 'comments.findMany', args, []);
    Comment.create = (args) => args.select ? new CommentClient(dmmf, fetcher, 'mutation', 'createOneComment', 'comments.create', args, []) : new CommentClient(dmmf, fetcher, 'mutation', 'createOneComment', 'comments.create', args, []);
    Comment.delete = (args) => args.select ? new CommentClient(dmmf, fetcher, 'mutation', 'deleteOneComment', 'comments.delete', args, []) : new CommentClient(dmmf, fetcher, 'mutation', 'deleteOneComment', 'comments.delete', args, []);
    Comment.update = (args) => args.select ? new CommentClient(dmmf, fetcher, 'mutation', 'updateOneComment', 'comments.update', args, []) : new CommentClient(dmmf, fetcher, 'mutation', 'updateOneComment', 'comments.update', args, []);
    Comment.deleteMany = (args) => new CommentClient(dmmf, fetcher, 'mutation', 'deleteManyComment', 'comments.deleteMany', args, []);
    Comment.updateMany = (args) => new CommentClient(dmmf, fetcher, 'mutation', 'updateManyComment', 'comments.updateMany', args, []);
    Comment.upsert = (args) => args.select ? new CommentClient(dmmf, fetcher, 'mutation', 'upsertOneComment', 'comments.upsert', args, []) : new CommentClient(dmmf, fetcher, 'mutation', 'upsertOneComment', 'comments.upsert', args, []);
    Comment.count = () => new CommentClient(dmmf, fetcher, 'query', 'aggregateComment', 'comments.count', {}, ['count']);
    return Comment; // any needed until https://github.com/microsoft/TypeScript/issues/31335 is resolved
}
class CommentClient {
    constructor(_dmmf, _fetcher, _queryType, _rootField, _clientMethod, _args, _path, _isList = false) {
        this._dmmf = _dmmf;
        this._fetcher = _fetcher;
        this._queryType = _queryType;
        this._rootField = _rootField;
        this._clientMethod = _clientMethod;
        this._args = _args;
        this._path = _path;
        this._isList = _isList;
        // @ts-ignore
        if (typeof window === 'undefined' && process.env.NODE_ENV !== 'production') {
            const error = new Error();
            if (error && error.stack) {
                const stack = error.stack;
                this._callsite = stack;
            }
        }
    }
    author(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'author'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new UserClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    review(args) {
        const prefix = this._path.includes('select') ? 'select' : this._path.includes('include') ? 'include' : 'select';
        const path = [...this._path, prefix, 'review'];
        const newArgs = runtime_1.deepSet(this._args, path, args || true);
        this._isList = false;
        return new ReviewClient(this._dmmf, this._fetcher, this._queryType, this._rootField, this._clientMethod, newArgs, path, this._isList);
    }
    get _document() {
        const { _rootField: rootField } = this;
        const document = runtime_1.makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: this._queryType,
            select: this._args
        });
        try {
            document.validate(this._args, false, this._clientMethod);
        }
        catch (e) {
            const x = e;
            if (x.render) {
                if (this._callsite) {
                    e.message = x.render(this._callsite);
                }
            }
            throw e;
        }
        return runtime_1.transformDocument(document);
    }
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then(onfulfilled, onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Comment', this._isList, this._callsite);
        }
        return this._requestPromise.then(onfulfilled, onrejected);
    }
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch(onrejected) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Comment', this._isList, this._callsite);
        }
        return this._requestPromise.catch(onrejected);
    }
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally) {
        if (!this._requestPromise) {
            this._requestPromise = this._fetcher.request(this._document, this._path, this._rootField, 'Comment', this._isList, this._callsite);
        }
        return this._requestPromise.finally(onfinally);
    }
}
exports.CommentClient = CommentClient;
/**
 * DMMF
 */
exports.dmmf = { "datamodel": { "enums": [{ "name": "Role", "values": ["USER", "OWNER", "ADMIN"], "dbName": null }], "models": [{ "name": "User", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "username", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "String", "isGenerated": false, "isUpdatedAt": false }, { "name": "role", "kind": "enum", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "Role", "default": "USER", "isGenerated": false, "isUpdatedAt": false }, { "name": "ownedRestaurants", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Restaurant", "relationName": "RestaurantToUser", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "authoredReviews", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Review", "relationName": "ReviewToUser", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "authoredComments", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Comment", "relationName": "CommentToUser", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "createdAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "default": { "name": "now", "returnType": "DateTime", "args": [] }, "isGenerated": false, "isUpdatedAt": false }], "isGenerated": false, "idFields": [] }, { "name": "Restaurant", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "creator", "kind": "object", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "User", "relationName": "RestaurantToUser", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "reviews", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Review", "relationName": "RestaurantToReview", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }], "isGenerated": false, "idFields": [] }, { "name": "Review", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "rating", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "restaurant", "kind": "object", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "Restaurant", "relationName": "RestaurantToReview", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "author", "kind": "object", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "User", "relationName": "ReviewToUser", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "comments", "kind": "object", "dbName": null, "isList": true, "isRequired": false, "isUnique": false, "isId": false, "type": "Comment", "relationName": "CommentToReview", "relationToFields": [], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }], "isGenerated": false, "idFields": [] }, { "name": "Comment", "isEmbedded": false, "dbName": null, "fields": [{ "name": "id", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": true, "type": "Int", "isGenerated": false, "isUpdatedAt": false }, { "name": "author", "kind": "object", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "User", "relationName": "CommentToUser", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": false, "isUpdatedAt": false }, { "name": "createdAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "default": { "name": "now", "returnType": "DateTime", "args": [] }, "isGenerated": false, "isUpdatedAt": false }, { "name": "updatedAt", "kind": "scalar", "dbName": null, "isList": false, "isRequired": true, "isUnique": false, "isId": false, "type": "DateTime", "isGenerated": false, "isUpdatedAt": true }, { "name": "review", "kind": "object", "dbName": null, "isList": false, "isRequired": false, "isUnique": false, "isId": false, "type": "Review", "relationName": "CommentToReview", "relationToFields": ["id"], "relationOnDelete": "NONE", "isGenerated": true, "isUpdatedAt": false }], "isGenerated": false, "idFields": [] }] }, "mappings": [{ "model": "User", "plural": "users", "findOne": "findOneUser", "findMany": "findManyUser", "create": "createOneUser", "delete": "deleteOneUser", "update": "updateOneUser", "deleteMany": "deleteManyUser", "updateMany": "updateManyUser", "upsert": "upsertOneUser", "aggregate": "aggregateUser" }, { "model": "Restaurant", "plural": "restaurants", "findOne": "findOneRestaurant", "findMany": "findManyRestaurant", "create": "createOneRestaurant", "delete": "deleteOneRestaurant", "update": "updateOneRestaurant", "deleteMany": "deleteManyRestaurant", "updateMany": "updateManyRestaurant", "upsert": "upsertOneRestaurant", "aggregate": "aggregateRestaurant" }, { "model": "Review", "plural": "reviews", "findOne": "findOneReview", "findMany": "findManyReview", "create": "createOneReview", "delete": "deleteOneReview", "update": "updateOneReview", "deleteMany": "deleteManyReview", "updateMany": "updateManyReview", "upsert": "upsertOneReview", "aggregate": "aggregateReview" }, { "model": "Comment", "plural": "comments", "findOne": "findOneComment", "findMany": "findManyComment", "create": "createOneComment", "delete": "deleteOneComment", "update": "updateOneComment", "deleteMany": "deleteManyComment", "updateMany": "updateManyComment", "upsert": "upsertOneComment", "aggregate": "aggregateComment" }], "schema": { "enums": [{ "name": "OrderByArg", "values": ["asc", "desc"] }, { "name": "Role", "values": ["USER", "OWNER", "ADMIN"] }], "outputTypes": [{ "name": "Comment", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "author", "args": [], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createdAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "updatedAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "review", "args": [], "outputType": { "type": "Review", "kind": "object", "isRequired": false, "isList": false } }] }, { "name": "Review", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "rating", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "restaurant", "args": [], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": true, "isList": false } }, { "name": "author", "args": [], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "comments", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "CommentOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": false, "isList": true } }] }, { "name": "Restaurant", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "creator", "args": [], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "reviews", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "ReviewOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": false, "isList": true } }] }, { "name": "User", "fields": [{ "name": "id", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "username", "args": [], "outputType": { "type": "String", "kind": "scalar", "isRequired": true, "isList": false } }, { "name": "role", "args": [], "outputType": { "type": "Role", "kind": "enum", "isRequired": true, "isList": false } }, { "name": "ownedRestaurants", "args": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "RestaurantOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": false, "isList": true } }, { "name": "authoredReviews", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "ReviewOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": false, "isList": true } }, { "name": "authoredComments", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "CommentOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": false, "isList": true } }, { "name": "createdAt", "args": [], "outputType": { "type": "DateTime", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "AggregateUser", "fields": [{ "name": "count", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "AggregateRestaurant", "fields": [{ "name": "count", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "AggregateReview", "fields": [{ "name": "count", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "AggregateComment", "fields": [{ "name": "count", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Query", "fields": [{ "name": "findManyUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "UserOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": true } }, { "name": "aggregateUser", "args": [], "outputType": { "type": "AggregateUser", "kind": "object", "isRequired": true, "isList": false } }, { "name": "findOneUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyRestaurant", "args": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "RestaurantOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": true, "isList": true } }, { "name": "aggregateRestaurant", "args": [], "outputType": { "type": "AggregateRestaurant", "kind": "object", "isRequired": true, "isList": false } }, { "name": "findOneRestaurant", "args": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyReview", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "ReviewOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": true, "isList": true } }, { "name": "aggregateReview", "args": [], "outputType": { "type": "AggregateReview", "kind": "object", "isRequired": true, "isList": false } }, { "name": "findOneReview", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": false, "isList": false } }, { "name": "findManyComment", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "orderBy", "inputType": [{ "isList": false, "isRequired": false, "type": "CommentOrderByInput", "kind": "object" }] }, { "name": "skip", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "after", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "before", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "first", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "last", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": true, "isList": true } }, { "name": "aggregateComment", "args": [], "outputType": { "type": "AggregateComment", "kind": "object", "isRequired": true, "isList": false } }, { "name": "findOneComment", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": false, "isList": false } }] }, { "name": "BatchPayload", "fields": [{ "name": "count", "args": [], "outputType": { "type": "Int", "kind": "scalar", "isRequired": true, "isList": false } }] }, { "name": "Mutation", "fields": [{ "name": "createOneUser", "args": [{ "name": "data", "inputType": [{ "type": "UserCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneUser", "args": [{ "name": "data", "inputType": [{ "type": "UserUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "User", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyUser", "args": [{ "name": "data", "inputType": [{ "type": "UserUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyUser", "args": [{ "name": "where", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneRestaurant", "args": [{ "name": "data", "inputType": [{ "type": "RestaurantCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneRestaurant", "args": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneRestaurant", "args": [{ "name": "data", "inputType": [{ "type": "RestaurantUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneRestaurant", "args": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "RestaurantCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "RestaurantUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Restaurant", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyRestaurant", "args": [{ "name": "data", "inputType": [{ "type": "RestaurantUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyRestaurant", "args": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneReview", "args": [{ "name": "data", "inputType": [{ "type": "ReviewCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneReview", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneReview", "args": [{ "name": "data", "inputType": [{ "type": "ReviewUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneReview", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ReviewCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ReviewUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Review", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyReview", "args": [{ "name": "data", "inputType": [{ "type": "ReviewUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyReview", "args": [{ "name": "where", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "createOneComment", "args": [{ "name": "data", "inputType": [{ "type": "CommentCreateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteOneComment", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": false, "isList": false } }, { "name": "updateOneComment", "args": [{ "name": "data", "inputType": [{ "type": "CommentUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": false, "isList": false } }, { "name": "upsertOneComment", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "CommentCreateInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "CommentUpdateInput", "kind": "object", "isRequired": true, "isList": false }] }], "outputType": { "type": "Comment", "kind": "object", "isRequired": true, "isList": false } }, { "name": "updateManyComment", "args": [{ "name": "data", "inputType": [{ "type": "CommentUpdateManyMutationInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "where", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }, { "name": "deleteManyComment", "args": [{ "name": "where", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": false }] }], "outputType": { "type": "BatchPayload", "kind": "object", "isRequired": true, "isList": false } }] }], "inputTypes": [{ "name": "CommentWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "CommentWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "author", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }, { "name": "review", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "ReviewWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "rating", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "comments", "inputType": [{ "type": "CommentFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "ReviewWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "restaurant", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }, { "name": "author", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "RestaurantWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "reviews", "inputType": [{ "type": "ReviewFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "RestaurantWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "creator", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": false }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "UserWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "username", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "type": "StringFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "role", "inputType": [{ "isList": false, "isRequired": false, "kind": "enum", "type": "Role" }, { "type": "RoleFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "authoredComments", "inputType": [{ "type": "CommentFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "UserWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "UserWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "RestaurantWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "ReviewWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "CommentWhereUniqueInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }], "atLeastOne": true }, { "name": "CommentCreateWithoutReviewInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserCreateOneWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "CommentCreateManyWithoutCommentsInput", "fields": [{ "name": "create", "inputType": [{ "type": "CommentCreateWithoutReviewInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "ReviewCreateWithoutAuthorInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "restaurant", "inputType": [{ "type": "RestaurantCreateOneWithoutRestaurantInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "comments", "inputType": [{ "type": "CommentCreateManyWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewCreateManyWithoutAuthoredReviewsInput", "fields": [{ "name": "create", "inputType": [{ "type": "ReviewCreateWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserCreateWithoutOwnedRestaurantsInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewCreateManyWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredComments", "inputType": [{ "type": "CommentCreateManyWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserCreateOneWithoutCreatorInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantCreateWithoutReviewsInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "creator", "inputType": [{ "type": "UserCreateOneWithoutCreatorInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "RestaurantCreateOneWithoutRestaurantInput", "fields": [{ "name": "create", "inputType": [{ "type": "RestaurantCreateWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewCreateWithoutCommentsInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "restaurant", "inputType": [{ "type": "RestaurantCreateOneWithoutRestaurantInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserCreateOneWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewCreateOneWithoutReviewInput", "fields": [{ "name": "create", "inputType": [{ "type": "ReviewCreateWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentCreateWithoutAuthorInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "review", "inputType": [{ "type": "ReviewCreateOneWithoutReviewInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentCreateManyWithoutAuthoredCommentsInput", "fields": [{ "name": "create", "inputType": [{ "type": "CommentCreateWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserCreateWithoutAuthoredReviewsInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantCreateManyWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredComments", "inputType": [{ "type": "CommentCreateManyWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserCreateOneWithoutAuthorInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewCreateWithoutRestaurantInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserCreateOneWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "comments", "inputType": [{ "type": "CommentCreateManyWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewCreateManyWithoutReviewsInput", "fields": [{ "name": "create", "inputType": [{ "type": "ReviewCreateWithoutRestaurantInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "RestaurantCreateWithoutCreatorInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "reviews", "inputType": [{ "type": "ReviewCreateManyWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantCreateManyWithoutOwnedRestaurantsInput", "fields": [{ "name": "create", "inputType": [{ "type": "RestaurantCreateWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserCreateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantCreateManyWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewCreateManyWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredComments", "inputType": [{ "type": "CommentCreateManyWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserCreateWithoutAuthoredCommentsInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantCreateManyWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewCreateManyWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpdateWithoutAuthoredCommentsDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantUpdateManyWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewUpdateManyWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpsertWithoutAuthoredCommentsInput", "fields": [{ "name": "update", "inputType": [{ "type": "UserUpdateWithoutAuthoredCommentsDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateWithoutAuthoredCommentsInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "UserUpdateOneRequiredWithoutAuthoredCommentsInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateWithoutAuthoredCommentsDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "UserUpsertWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateWithoutReviewDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserUpdateOneRequiredWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateWithWhereUniqueWithoutReviewInput", "fields": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "CommentUpdateWithoutReviewDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "CommentScalarWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "type": "DateTimeFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "CommentScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "CommentScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "CommentScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "CommentUpdateManyDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateManyWithWhereNestedInput", "fields": [{ "name": "where", "inputType": [{ "type": "CommentScalarWhereInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "CommentUpdateManyDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "CommentUpsertWithWhereUniqueWithoutReviewInput", "fields": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "CommentUpdateWithoutReviewDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "CommentCreateWithoutReviewInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "CommentUpdateManyWithoutReviewInput", "fields": [{ "name": "create", "inputType": [{ "type": "CommentCreateWithoutReviewInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "CommentUpdateWithWhereUniqueWithoutReviewInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "CommentUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "CommentScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "CommentUpsertWithWhereUniqueWithoutReviewInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "ReviewUpdateWithoutAuthorDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "restaurant", "inputType": [{ "type": "RestaurantUpdateOneRequiredWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "comments", "inputType": [{ "type": "CommentUpdateManyWithoutReviewInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateWithWhereUniqueWithoutAuthorInput", "fields": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "ReviewUpdateWithoutAuthorDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewScalarWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "rating", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "comments", "inputType": [{ "type": "CommentFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "ReviewScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "ReviewScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "ReviewScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "ReviewUpdateManyDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateManyWithWhereNestedInput", "fields": [{ "name": "where", "inputType": [{ "type": "ReviewScalarWhereInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "ReviewUpdateManyDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewUpsertWithWhereUniqueWithoutAuthorInput", "fields": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ReviewUpdateWithoutAuthorDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ReviewCreateWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewUpdateManyWithoutAuthorInput", "fields": [{ "name": "create", "inputType": [{ "type": "ReviewCreateWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "ReviewUpdateWithWhereUniqueWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "ReviewUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "ReviewScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "ReviewUpsertWithWhereUniqueWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserUpdateWithoutOwnedRestaurantsDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewUpdateManyWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredComments", "inputType": [{ "type": "CommentUpdateManyWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpsertWithoutOwnedRestaurantsInput", "fields": [{ "name": "update", "inputType": [{ "type": "UserUpdateWithoutOwnedRestaurantsDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "UserUpdateOneRequiredWithoutOwnedRestaurantsInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateWithoutOwnedRestaurantsDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "UserUpsertWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantUpdateWithoutReviewsDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "creator", "inputType": [{ "type": "UserUpdateOneRequiredWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantUpsertWithoutReviewsInput", "fields": [{ "name": "update", "inputType": [{ "type": "RestaurantUpdateWithoutReviewsDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "RestaurantCreateWithoutReviewsInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "RestaurantUpdateOneRequiredWithoutReviewsInput", "fields": [{ "name": "create", "inputType": [{ "type": "RestaurantCreateWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "RestaurantUpdateWithoutReviewsDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "RestaurantUpsertWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateWithoutCommentsDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "restaurant", "inputType": [{ "type": "RestaurantUpdateOneRequiredWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserUpdateOneRequiredWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpsertWithoutCommentsInput", "fields": [{ "name": "update", "inputType": [{ "type": "ReviewUpdateWithoutCommentsDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ReviewCreateWithoutCommentsInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewUpdateOneWithoutCommentsInput", "fields": [{ "name": "create", "inputType": [{ "type": "ReviewCreateWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "disconnect", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "delete", "inputType": [{ "type": "Boolean", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ReviewUpdateWithoutCommentsDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "ReviewUpsertWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateWithoutAuthorDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "review", "inputType": [{ "type": "ReviewUpdateOneWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateWithWhereUniqueWithoutAuthorInput", "fields": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "CommentUpdateWithoutAuthorDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "CommentUpsertWithWhereUniqueWithoutAuthorInput", "fields": [{ "name": "where", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "CommentUpdateWithoutAuthorDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "CommentCreateWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "CommentUpdateManyWithoutAuthorInput", "fields": [{ "name": "create", "inputType": [{ "type": "CommentCreateWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "CommentWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "CommentUpdateWithWhereUniqueWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "CommentUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "CommentScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "CommentUpsertWithWhereUniqueWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserUpdateWithoutAuthoredReviewsDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantUpdateManyWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredComments", "inputType": [{ "type": "CommentUpdateManyWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpsertWithoutAuthoredReviewsInput", "fields": [{ "name": "update", "inputType": [{ "type": "UserUpdateWithoutAuthoredReviewsDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "UserCreateWithoutAuthoredReviewsInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "UserUpdateOneRequiredWithoutAuthoredReviewsInput", "fields": [{ "name": "create", "inputType": [{ "type": "UserCreateWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "connect", "inputType": [{ "type": "UserWhereUniqueInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "update", "inputType": [{ "type": "UserUpdateWithoutAuthoredReviewsDataInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "upsert", "inputType": [{ "type": "UserUpsertWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateWithoutRestaurantDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserUpdateOneRequiredWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "comments", "inputType": [{ "type": "CommentUpdateManyWithoutReviewInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateWithWhereUniqueWithoutRestaurantInput", "fields": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "ReviewUpdateWithoutRestaurantDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewUpsertWithWhereUniqueWithoutRestaurantInput", "fields": [{ "name": "where", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "ReviewUpdateWithoutRestaurantDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "ReviewCreateWithoutRestaurantInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "ReviewUpdateManyWithoutRestaurantInput", "fields": [{ "name": "create", "inputType": [{ "type": "ReviewCreateWithoutRestaurantInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "ReviewWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "ReviewUpdateWithWhereUniqueWithoutRestaurantInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "ReviewUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "ReviewScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "ReviewUpsertWithWhereUniqueWithoutRestaurantInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "RestaurantUpdateWithoutCreatorDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "reviews", "inputType": [{ "type": "ReviewUpdateManyWithoutRestaurantInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantUpdateWithWhereUniqueWithoutCreatorInput", "fields": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "RestaurantUpdateWithoutCreatorDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "RestaurantScalarWhereInput", "fields": [{ "name": "id", "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "type": "IntFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "reviews", "inputType": [{ "type": "ReviewFilter", "isList": false, "isRequired": false, "kind": "object" }], "isRelationFilter": false }, { "name": "AND", "inputType": [{ "type": "RestaurantScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "OR", "inputType": [{ "type": "RestaurantScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }, { "name": "NOT", "inputType": [{ "type": "RestaurantScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }], "isRelationFilter": true }], "isWhereType": true, "atLeastOne": false }, { "name": "RestaurantUpdateManyDataInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantUpdateManyWithWhereNestedInput", "fields": [{ "name": "where", "inputType": [{ "type": "RestaurantScalarWhereInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "data", "inputType": [{ "type": "RestaurantUpdateManyDataInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "RestaurantUpsertWithWhereUniqueWithoutCreatorInput", "fields": [{ "name": "where", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "update", "inputType": [{ "type": "RestaurantUpdateWithoutCreatorDataInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "create", "inputType": [{ "type": "RestaurantCreateWithoutCreatorInput", "kind": "object", "isRequired": true, "isList": false }] }] }, { "name": "RestaurantUpdateManyWithoutCreatorInput", "fields": [{ "name": "create", "inputType": [{ "type": "RestaurantCreateWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "connect", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "set", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "disconnect", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "delete", "inputType": [{ "type": "RestaurantWhereUniqueInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "update", "inputType": [{ "type": "RestaurantUpdateWithWhereUniqueWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "updateMany", "inputType": [{ "type": "RestaurantUpdateManyWithWhereNestedInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "deleteMany", "inputType": [{ "type": "RestaurantScalarWhereInput", "kind": "object", "isRequired": false, "isList": true }] }, { "name": "upsert", "inputType": [{ "type": "RestaurantUpsertWithWhereUniqueWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": true }] }] }, { "name": "UserUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "ownedRestaurants", "inputType": [{ "type": "RestaurantUpdateManyWithoutCreatorInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredReviews", "inputType": [{ "type": "ReviewUpdateManyWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "authoredComments", "inputType": [{ "type": "CommentUpdateManyWithoutAuthorInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "UserUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "username", "inputType": [{ "type": "String", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "role", "inputType": [{ "type": "Role", "kind": "enum", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantCreateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "creator", "inputType": [{ "type": "UserCreateOneWithoutCreatorInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "reviews", "inputType": [{ "type": "ReviewCreateManyWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "creator", "inputType": [{ "type": "UserUpdateOneRequiredWithoutOwnedRestaurantsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "reviews", "inputType": [{ "type": "ReviewUpdateManyWithoutRestaurantInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "RestaurantUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "ReviewCreateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "restaurant", "inputType": [{ "type": "RestaurantCreateOneWithoutRestaurantInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserCreateOneWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "comments", "inputType": [{ "type": "CommentCreateManyWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "restaurant", "inputType": [{ "type": "RestaurantUpdateOneRequiredWithoutReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserUpdateOneRequiredWithoutAuthoredReviewsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "comments", "inputType": [{ "type": "CommentUpdateManyWithoutReviewInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "ReviewUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "rating", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "CommentCreateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": true, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserCreateOneWithoutAuthorInput", "kind": "object", "isRequired": true, "isList": false }] }, { "name": "review", "inputType": [{ "type": "ReviewCreateOneWithoutReviewInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "author", "inputType": [{ "type": "UserUpdateOneRequiredWithoutAuthoredCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }, { "name": "review", "inputType": [{ "type": "ReviewUpdateOneWithoutCommentsInput", "kind": "object", "isRequired": false, "isList": false }] }] }, { "name": "CommentUpdateManyMutationInput", "fields": [{ "name": "id", "inputType": [{ "type": "Int", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "createdAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }, { "name": "updatedAt", "inputType": [{ "type": "DateTime", "kind": "scalar", "isRequired": false, "isList": false }] }] }, { "name": "IntFilter", "fields": [{ "name": "equals", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "not", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }, { "isList": false, "isRequired": false, "kind": "scalar", "type": "IntFilter" }] }, { "name": "in", "isRelationFilter": false, "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "notIn", "isRelationFilter": false, "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "lt", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "lte", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "gt", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }, { "name": "gte", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "Int" }] }], "atLeastOne": false }, { "name": "DateTimeFilter", "fields": [{ "name": "equals", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "not", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }, { "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTimeFilter" }] }, { "name": "in", "isRelationFilter": false, "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "notIn", "isRelationFilter": false, "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "lt", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "lte", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "gt", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }, { "name": "gte", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "DateTime" }] }], "atLeastOne": false }, { "name": "CommentFilter", "fields": [{ "name": "every", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "CommentWhereInput" }] }, { "name": "some", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "CommentWhereInput" }] }, { "name": "none", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "CommentWhereInput" }] }], "atLeastOne": false }, { "name": "ReviewFilter", "fields": [{ "name": "every", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "ReviewWhereInput" }] }, { "name": "some", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "ReviewWhereInput" }] }, { "name": "none", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "ReviewWhereInput" }] }], "atLeastOne": false }, { "name": "StringFilter", "fields": [{ "name": "equals", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "not", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }, { "isList": false, "isRequired": false, "kind": "scalar", "type": "StringFilter" }] }, { "name": "in", "isRelationFilter": false, "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "notIn", "isRelationFilter": false, "inputType": [{ "isList": true, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "lt", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "lte", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "gt", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "gte", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "contains", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "startsWith", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }, { "name": "endsWith", "isRelationFilter": false, "inputType": [{ "isList": false, "isRequired": false, "kind": "scalar", "type": "String" }] }], "atLeastOne": false }, { "name": "RoleFilter", "fields": [], "atLeastOne": false }, { "name": "RestaurantFilter", "fields": [{ "name": "every", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "RestaurantWhereInput" }] }, { "name": "some", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "RestaurantWhereInput" }] }, { "name": "none", "isRelationFilter": true, "inputType": [{ "isList": false, "isRequired": false, "kind": "object", "type": "RestaurantWhereInput" }] }], "atLeastOne": false }, { "name": "UserOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "username", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "role", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "RestaurantOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "ReviewOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "rating", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }, { "name": "CommentOrderByInput", "atLeastOne": true, "atMostOne": true, "isOrderType": true, "fields": [{ "name": "id", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "createdAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }, { "name": "updatedAt", "inputType": [{ "type": "OrderByArg", "isList": false, "isRequired": false, "kind": "enum" }], "isRelationFilter": false }] }] } };
