const { Photon } = require(process.argv[2])

const photon = new Photon()

process.on('message', async ({ requestId, action, data }) => {
  let response
  switch (action) {
    case 'connect':
      response = await connect(data)
      break

    case 'request':
      response = await request(data)
      break

    case 'disconnect':
      response = await disconnect()
      break
  }

  if (!process.channel) {
    // If the parent's IPC channel is already closed, there's nothing to do
    return
  }

  process.send({ requestId, ...response })
})

const connect = async options => {
  try {
    return {
      error: null,
      data: await photon.start(options),
    }
  } catch (e) {
    console.log('Error connecting to Photon', e)
    return { error: { message: e.message, stack: e.stack }, data: null }
  }
}

const request = async options => {
  try {
    const { error, response, meta } = await photon.request(options)
    return { error, data: { response, meta, error } }
  } catch (e) {
    console.log('Error with Photon request', e)
    return { error: { message: e.message, stack: e.stack }, data: null }
  }
}

const disconnect = async options => {
  try {
    return { error: null, data: await photon.stop(options) }
  } catch (e) {
    console.log('Error disconnecting from photon', e)
    return { error: { message: e.message, stack: e.stack }, data: null }
  }
}
